#!/usr/bin/env python3
"""
NFC Card Type Detection Script using PN532 Module and pn532-py Library

This script initializes the PN532 module, continuously scans for NFC tags,
retrieves card information, and identifies if the detected card is a MIFARE card.
"""

import sys
import time
import logging
from pn532 import *
from pn532 import PN532_SPI

# Configure logging
logging.basicConfig(
    filename='nfc_detector.log',
    filemode='a',
    format='%(asctime)s %(levelname)s:%(message)s',
    level=logging.DEBUG
)

# Configuration Constants
SPI_CS_PIN = 4        # Chip Select pin for SPI
PN532_RESET_PIN = 20  # Reset pin for PN532
DEBUG = True          # Set to True to enable debug output

def initialize_pn532() -> Optional[PN532_SPI]:
    """Initialize the PN532 module and return the PN532 object."""
    try:
        pn532 = PN532_SPI(cs=SPI_CS_PIN, reset=PN532_RESET_PIN, debug=DEBUG)
        ic, ver, rev, support = pn532.get_firmware_version()
        print(f'Found PN532 with firmware version: {ver}.{rev}')
        logging.info(f'Found PN532 with firmware version: {ver}.{rev}')
        pn532.SAM_configuration()
        print('PN532 SAM configuration completed.')
        logging.info('PN532 SAM configuration completed.')
        return pn532
    except Exception as e:
        print(f"Failed to initialize PN532: {e}")
        logging.error(f"Failed to initialize PN532: {e}")
        return None

def detect_card_type(pn532: PN532_SPI):
    """
    Detect and identify the type of NFC card using PN532.

    Args:
        pn532: Initialized PN532 object.
    """
    try:
        print('Waiting for NFC card...')
        logging.info("Waiting for NFC card...")

        while True:
            uid = pn532.read_passive_target(timeout=1.0)
            if uid is not None:
                print('\nFound card with UID:', [hex(i) for i in uid])
                logging.info(f"Found card with UID: {[hex(i) for i in uid]}")

                # Get card details
                card_info = pn532.initiator_select_passive_target(uid)
                if card_info:
                    atqa = card_info.atqa
                    sak = card_info.sak
                    print(f"ATQA: {atqa.hex()}")
                    print(f"SAK: {sak:#04x}")
                    logging.info(f"ATQA: {atqa.hex()}, SAK: {sak:#04x}")

                    # Identify card type based on ATQA and SAK
                    card_type = identify_card(atqa, sak)
                    print(f"Card Type: {card_type}")
                    logging.info(f"Card Type: {card_type}")
                else:
                    print("Failed to retrieve card information.")
                    logging.warning("Failed to retrieve card information.")

                print('Waiting for the next card...\n')
                logging.info("Waiting for the next card...")

            time.sleep(0.5)

    except KeyboardInterrupt:
        print("\nExiting program.")
        logging.info("Exiting program.")
    except Exception as e:
        print(f"\nError: {e}")
        logging.error(f"Unexpected error: {e}")

def identify_card(atqa: bytes, sak: int) -> str:
    """
    Identify the NFC card type based on ATQA and SAK values.

    Args:
        atqa: ATQA bytes from the card.
        sak: SAK byte from the card.

    Returns:
        String representing the card type.
    """
    # Example identification logic based on ATQA and SAK
    # This can be expanded based on ISO/IEC 14443 standards

    # MIFARE Classic typically has SAK = 0x08
    # MIFARE Ultralight has SAK = 0x00
    # MIFARE DESFire has SAK = 0x20

    if sak & 0x08:
        return "MIFARE Classic"
    elif sak & 0x20:
        return "MIFARE DESFire"
    elif sak == 0x00:
        return "MIFARE Ultralight"
    else:
        return "Unknown or Non-MIFARE Card"

def main():
    """Main function to run the NFC card type detection."""
    pn532 = initialize_pn532()
    if not pn532:
        print("Failed to initialize PN532. Exiting.")
        sys.exit(1)

    detect_card_type(pn532)

if __name__ == '__main__':
    main()
